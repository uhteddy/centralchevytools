name: Build and Release Tauri App

on:
  push:
    branches:
      - master

jobs:
  build_and_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          override: true

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri App
        run: |
          npm run tauri build
          mkdir -p releases
          cp src-tauri/target/release/my-app* releases

      - name: Get Tauri version
        id: tauri_version
        run: |
          VERSION=$(grep -oP '^version = "\K(.*)(?=")' Cargo.toml)
          echo "TAURI_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: v${{ env.TAURI_VERSION }}
          release_name: Release v${{ env.TAURI_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: releases/my-app-${{ matrix.os }}-${{ env.TAURI_VERSION }}.zip
          asset_name: my-app-${{ matrix.os }}-${{ env.TAURI_VERSION }}.zip
          asset_content_type: application/zip

      - name: Cleanup
        if: always()
        run: |
          rm -rf releases